[{"path":"https://yjunechoe.github.io/selectmore/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 selectmore authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://yjunechoe.github.io/selectmore/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"First Last. Author, maintainer.","code":""},{"path":"https://yjunechoe.github.io/selectmore/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Last F (2024). selectmore: Tidy Data Frame Column Selection Helpers. R package version 0.0.0.9000, https://yjunechoe.github.io/selectmore/.","code":"@Manual{,   title = {selectmore: Tidy Data Frame Column Selection Helpers},   author = {First Last},   year = {2024},   note = {R package version 0.0.0.9000},   url = {https://yjunechoe.github.io/selectmore/}, }"},{"path":"https://yjunechoe.github.io/selectmore/index.html","id":"selectmore","dir":"","previous_headings":"","what":"Tidy Data Frame Column Selection Helpers","title":"Tidy Data Frame Column Selection Helpers","text":"selectmore provides extensions built top tidyselect flexible powerful column subsetting patterns.","code":""},{"path":"https://yjunechoe.github.io/selectmore/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tidy Data Frame Column Selection Helpers","text":"can install development version selectmore GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"yjunechoe/selectmore\")"},{"path":"https://yjunechoe.github.io/selectmore/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Tidy Data Frame Column Selection Helpers","text":"Baseline comparison matches(): Match order match_order(): Rename columns using {unglue} syntax match_rename():","code":"library(selectmore) library(dplyr, warn.conflicts = FALSE) df <- data.frame(   x_1 = 1,   x_2 = 2,   y_2 = 3,   y_1 = 4,   y_3 = 5,   x_3 = 6,   nomatch = 0 ) df #>   x_1 x_2 y_2 y_1 y_3 x_3 nomatch #> 1   1   2   3   4   5   6       0 df %>%   select(matches(\"(x|y)_(\\\\d)\")) #>   x_1 x_2 y_2 y_1 y_3 x_3 #> 1   1   2   3   4   5   6 # Order with priority on keeping the letters (1st group) close together df %>%   select(match_order(\"(x|y)_(\\\\d)\", c(1, 2))) #>   x_1 x_2 x_3 y_1 y_2 y_3 #> 1   1   2   6   4   3   5  # Similar to above, but sort letters in reverse order df %>%   select(match_order(\"(x|y)_(\\\\d)\", c(-1, 2))) #>   y_1 y_2 y_3 x_1 x_2 x_3 #> 1   4   3   5   1   2   6  # Order with priority on keeping the numbers (2nd group) close together df %>%   select(match_order(\"(x|y)_(\\\\d)\", c(2, 1))) #>   x_1 y_1 x_2 y_2 x_3 y_3 #> 1   1   4   2   3   6   5  # Same as above, the 2nd group is \"slowest\" because it has more categories df %>%   select(match_order(\"(x|y)_(\\\\d)\", order_by = \"slowest\")) #>   x_1 x_2 x_3 y_1 y_2 y_3 #> 1   1   2   6   4   3   5 df %>%    select(     match_order(\"(x|y)_(\\\\d)\"), # Match columns on pattern and sorts by fastest     everything()                # Grab the leftover columns (`nomatch`)   ) %>%    # Rename matching columns using `unglue::unglue_sub()` syntax   rename(match_rename(\"{letter}_{number}\", list(toupper, ~ .x * 10))) #>   X_10 Y_10 X_20 Y_20 X_30 Y_30 nomatch #> 1    1    4    2    3    6    5       0"},{"path":"https://yjunechoe.github.io/selectmore/reference/cur_colnames.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a vector of current column names — cur_colnames","title":"Get a vector of current column names — cur_colnames","text":"wrapper tidyselect::peek_vars(), re-exported dplyr.","code":""},{"path":"https://yjunechoe.github.io/selectmore/reference/cur_colnames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a vector of current column names — cur_colnames","text":"","code":"cur_colnames()"},{"path":[]},{"path":"https://yjunechoe.github.io/selectmore/reference/cur_colnames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a vector of current column names — cur_colnames","text":"","code":"library(dplyr, warn.conflicts = FALSE) df <- as.data.frame(as.list(1:10))  identical(   df,   df %>% select(cur_colnames()) ) #> [1] TRUE  df %>%   select(rev(cur_colnames())) #>   X10L X9L X8L X7L X6L X5L X4L X3L X2L X1L #> 1   10   9   8   7   6   5   4   3   2   1  df %>%   select(stringr::str_subset(cur_colnames(), \"[1-5]L$\")) #>   X1L X2L X3L X4L X5L #> 1   1   2   3   4   5"},{"path":"https://yjunechoe.github.io/selectmore/reference/last_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Vectorized last_col — last_cols","title":"Vectorized last_col — last_cols","text":"Vectorized last_col","code":""},{"path":"https://yjunechoe.github.io/selectmore/reference/last_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vectorized last_col — last_cols","text":"","code":"last_cols(offsets)"},{"path":"https://yjunechoe.github.io/selectmore/reference/last_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vectorized last_col — last_cols","text":"offsets integer vector columns select end. single number provided, selects (offsets - 1):0.","code":""},{"path":[]},{"path":"https://yjunechoe.github.io/selectmore/reference/last_cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vectorized last_col — last_cols","text":"","code":"library(dplyr, warn.conflicts = FALSE) df <- as.data.frame(as.list(1:10))  # Selects last 5 columns df %>% select(last_cols(5)) #>   X6L X7L X8L X9L X10L #> 1   6   7   8   9   10 # Same as above df %>% select(last_cols(4:0)) #>   X6L X7L X8L X9L X10L #> 1   6   7   8   9   10  # Using tidyselect::last_col() df %>% select(last_col(4):last_col()) #>   X6L X7L X8L X9L X10L #> 1   6   7   8   9   10"},{"path":"https://yjunechoe.github.io/selectmore/reference/match_order.html","id":null,"dir":"Reference","previous_headings":"","what":"Match and sort columns with regex capture groups — match_order","title":"Match and sort columns with regex capture groups — match_order","text":"Match sort columns regex capture groups","code":""},{"path":"https://yjunechoe.github.io/selectmore/reference/match_order.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match and sort columns with regex capture groups — match_order","text":"","code":"match_order(match, ordering, ..., order_by = c(\"fastest\", \"slowest\"))"},{"path":"https://yjunechoe.github.io/selectmore/reference/match_order.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match and sort columns with regex capture groups — match_order","text":"match regular expression. Passed tidyselect::matches(). ordering integer vector regex capture group IDs order columns . Negative indices sort group reverse order. specified, defaults mutually exclusive argument order_by. ... Arguments passed tidyselect::matches ignore.case TRUE, default, ignores case matching names. vars character vector variable names. supplied, variables taken current selection context (established functions like select() pivot_longer()). perl Perl-compatible regexps used? order_by One \"fastest\" \"slowest\". Determines speed cycling column groups. Mutually exclusive ordering. Defaults \"fastest\".","code":""},{"path":[]},{"path":"https://yjunechoe.github.io/selectmore/reference/match_order.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Match and sort columns with regex capture groups — match_order","text":"","code":"library(dplyr, warn.conflicts = FALSE) df <- data.frame(   x_1 = 1,   x_2 = 2,   y_2 = 3,   y_1 = 4,   y_3 = 5,   x_3 = 6 )  # Comparison: `matches()` df %>%   select(matches(\"(x|y)_(\\\\d)\")) #>   x_1 x_2 y_2 y_1 y_3 x_3 #> 1   1   2   3   4   5   6  # Order with priority on keeping the letters (1st group) close together df %>%   select(match_order(\"(x|y)_(\\\\d)\", c(1, 2))) #>   x_1 x_2 x_3 y_1 y_2 y_3 #> 1   1   2   6   4   3   5 # Same as above, but sort letters in reverse order df %>%   select(match_order(\"(x|y)_(\\\\d)\", c(-1, 2))) #>   y_1 y_2 y_3 x_1 x_2 x_3 #> 1   4   3   5   1   2   6  # Order with priority on keeping the numbers (2nd group) close together df %>%   select(match_order(\"(x|y)_(\\\\d)\", c(2, 1))) #>   x_1 y_1 x_2 y_2 x_3 y_3 #> 1   1   4   2   3   6   5 # Same as above, the 2nd group is \"slowest\" because it has more categories df %>%   select(match_order(\"(x|y)_(\\\\d)\", order_by = \"slowest\")) #>   x_1 x_2 x_3 y_1 y_2 y_3 #> 1   1   2   6   4   3   5"},{"path":"https://yjunechoe.github.io/selectmore/reference/match_rename.html","id":null,"dir":"Reference","previous_headings":"","what":"Match and rename columns using unglue syntax — match_rename","title":"Match and rename columns using unglue syntax — match_rename","text":"Renames pattern matched set columns using unglue::unglue_sub()","code":""},{"path":"https://yjunechoe.github.io/selectmore/reference/match_rename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match and rename columns using unglue syntax — match_rename","text":"","code":"match_rename(patterns, repl = identity, ..., convert = TRUE)"},{"path":"https://yjunechoe.github.io/selectmore/reference/match_rename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match and rename columns using unglue syntax — match_rename","text":"patterns character vector list character vectors, list, items pasted using empty separator (\"\"). repl function apply matched substrings, formula (package rlang installed), substring, named list . ... Unused. convert Whether convert matches integer possible.","code":""},{"path":[]},{"path":"https://yjunechoe.github.io/selectmore/reference/match_rename.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Match and rename columns using unglue syntax — match_rename","text":"","code":"library(dplyr, warn.conflicts = FALSE) df <- data.frame(   x_1 = 1,   x_2 = 2,   y_1 = 3,   y_2 = 4,   nomatch = 0 )  # Select and rename df %>%   select(     match_rename(\"{letter}_{number}\", list(toupper, ~ .x * 10))   ) #>   X_10 X_20 Y_10 Y_20 #> 1    1    2    3    4  # More explicit form df %>%   select(     match_rename(       patterns = \"{letter=x|y}_{number=\\\\d}\",       repl = list(letter = toupper, number = ~ .x * 10),       convert = TRUE     )   ) #>   X_10 X_20 Y_10 Y_20 #> 1    1    2    3    4  # Use inside `rename()` to rename in place, without subsetting columns df %>%   rename(     match_rename(\"{letter}_{number}\", list(toupper, ~ .x * 10))   ) #>   X_10 X_20 Y_10 Y_20 nomatch #> 1    1    2    3    4       0"},{"path":"https://yjunechoe.github.io/selectmore/reference/match_str_sort.html","id":null,"dir":"Reference","previous_headings":"","what":"Match and sort columns by name — match_str_sort","title":"Match and sort columns by name — match_str_sort","text":"Sorts regex-matched set columns using stringr::str_sort()","code":""},{"path":"https://yjunechoe.github.io/selectmore/reference/match_str_sort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match and sort columns by name — match_str_sort","text":"","code":"match_str_sort(match, ...)"},{"path":"https://yjunechoe.github.io/selectmore/reference/match_str_sort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match and sort columns by name — match_str_sort","text":"match regular expression. Passed tidyselect::matches(). ... Arguments passed stringr::str_sort x character vector sort. decreasing boolean. FALSE, default, sorts lowest highest; TRUE sorts highest lowest. na_last NA go? TRUE end, FALSE beginning, NA dropped. locale Locale use comparisons. See stringi::stri_locale_list() possible options. Defaults \"en\" (English) ensure default behaviour consistent across platforms. numeric TRUE, sort digits numerically, instead strings.","code":""},{"path":[]},{"path":"https://yjunechoe.github.io/selectmore/reference/match_str_sort.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Match and sort columns by name — match_str_sort","text":"","code":"library(dplyr, warn.conflicts = FALSE) df <- data.frame(c = 1, ch = 3, h = 2, nomatch = 0)  df %>%   select(match_str_sort(\"^[a-z]+$\")) #>   c ch h nomatch #> 1 1  3 2       0  # \"ch\" sorts after \"h\" in Czech locale df %>%   select(match_str_sort(\"^[a-z]+$\", locale = \"cs\")) #>   c h ch nomatch #> 1 1 2  3       0"},{"path":"https://yjunechoe.github.io/selectmore/reference/only_n_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Select exact number of columns from a character vector — only_n_of","title":"Select exact number of columns from a character vector — only_n_of","text":"Select exact number columns character vector","code":""},{"path":"https://yjunechoe.github.io/selectmore/reference/only_n_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select exact number of columns from a character vector — only_n_of","text":"","code":"only_n_of(x, n, ..., vars = NULL)"},{"path":"https://yjunechoe.github.io/selectmore/reference/only_n_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select exact number of columns from a character vector — only_n_of","text":"x vector character names numeric locations. n Exact number column matches expect ... Unused. vars character vector variable names. supplied, variables taken current selection context (established functions like select() pivot_longer()).","code":""},{"path":"https://yjunechoe.github.io/selectmore/reference/only_n_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select exact number of columns from a character vector — only_n_of","text":"","code":"library(dplyr, warn.conflicts = FALSE) df <- data.frame(ID = 1, id = 1) id_vec <- c(\"ID\", \"id\")  df %>% select(any_of(id_vec)) #>   ID id #> 1  1  1  df %>% select(only_n_of(id_vec, 2)) #>   ID id #> 1  1  1 try(   df %>% select(only_n_of(id_vec, 1)) ) #> Error in select(., only_n_of(id_vec, 1)) :  #>   ℹ In argument: `only_n_of(id_vec, 1)`. #> Caused by error in `only_n_of()`: #> ! Number of columns matched in `x` does not equal `n`"}]
